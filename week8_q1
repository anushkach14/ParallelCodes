#include <stdio.h>
#include <mpi.h>

int main(int argc, char *argv[]) {
    int rank, size;
    int n = 1000;  // Size of the array
    int arr[n];
    int local_sum = 0;
    int total_sum = 0;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Process 0 initializes the array with values 1 to n
    if (rank == 0) {
        for (int i = 0; i < n; i++) {
            arr[i] = i + 1;
        }
    }

    // Calculate portion size for each process
    int local_n = n / size;  // Each process gets this many elements
    int *local_arr = (int *)malloc(local_n * sizeof(int));

    // Scatter the array from process 0 to all processes
    MPI_Scatter(arr, local_n, MPI_INT, local_arr, local_n, MPI_INT, 0, MPI_COMM_WORLD);

    // Each process calculates the sum of its portion
    for (int i = 0; i < local_n; i++) {
        local_sum += local_arr[i];
    }

    // Gather all partial sums into process 0
    MPI_Gather(&local_sum, 1, MPI_INT, &total_sum, 1, MPI_INT, 0, MPI_COMM_WORLD);

    // Process 0 prints the total sum
    if (rank == 0) {
        printf("Total sum: %d\n", total_sum);
    }

    // Clean up
    free(local_arr);
    MPI_Finalize();
    return 0;
}
