#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

int main(int argc, char *argv[]) {
    int rank, size;
    int *data = NULL;
    int *sub_data = NULL;
    int *gathered_data = NULL;
    int data_size = 16;  // Total size of the array
    int sub_data_size;   // Size of sub-array each process will receive
    int i;

    // Initialize MPI
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    sub_data_size = data_size / size;  // Size of data each process will handle

    // Root process initializes the data
    if (rank == 0) {
        data = (int *)malloc(data_size * sizeof(int));
        for (i = 0; i < data_size; i++) {
            data[i] = i + 1;  // Fill with example data (1, 2, 3, ..., 16)
        }
    }

    // Allocate space for each process to hold its part of the data
    sub_data = (int *)malloc(sub_data_size * sizeof(int));

    // Scatter the data to all processes
    MPI_Scatter(data, sub_data_size, MPI_INT, sub_data, sub_data_size, MPI_INT, 0, MPI_COMM_WORLD);

    // Each process processes its part of the data (for example, multiply each element by 2)
    for (i = 0; i < sub_data_size; i++) {
        sub_data[i] *= 2;
    }

    // Gather the results back to the root process
    if (rank == 0) {
        gathered_data = (int *)malloc(data_size * sizeof(int));
    }

    MPI_Gather(sub_data, sub_data_size, MPI_INT, gathered_data, sub_data_size, MPI_INT, 0, MPI_COMM_WORLD);

    // Root process prints the gathered data
    if (rank == 0) {
        printf("Processed data:\n");
        for (i = 0; i < data_size; i++) {
            printf("%d ", gathered_data[i]);
        }
        printf("\n");

        // Clean up allocated memory
        free(data);
        free(gathered_data);
    }

    // Clean up process-specific memory
    free(sub_data);

    // Finalize MPI
    MPI_Finalize();

    return 0;
}
