#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

void merge(int *array, int left, int mid, int right) {
    int size1 = mid - left + 1;
    int size2 = right - mid;
    int *L = malloc(size1 * sizeof(int));
    int *R = malloc(size2 * sizeof(int));

    for (int i = 0; i < size1; i++) L[i] = array[left + i];
    for (int i = 0; i < size2; i++) R[i] = array[mid + 1 + i];

    int i = 0, j = 0, k = left;
    while (i < size1 && j < size2) {
        if (L[i] <= R[j]) array[k++] = L[i++];
        else array[k++] = R[j++];
    }
    while (i < size1) array[k++] = L[i++];
    while (j < size2) array[k++] = R[j++];

    free(L);
    free(R);
}

void merge_sort_parallel(int *array, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        #pragma omp parallel sections
        {
            #pragma omp section
            merge_sort_parallel(array, left, mid);
            #pragma omp section
            merge_sort_parallel(array, mid + 1, right);
        }
        merge(array, left, mid, right);
    }
}

int main() {
    int n = 100000;
    int *array = malloc(n * sizeof(int));
    for (int i = 0; i < n; i++) array[i] = rand() % 1000;

    double start = omp_get_wtime();
    merge_sort_parallel(array, 0, n - 1);
    double end = omp_get_wtime();
    printf("Time: %f seconds\n", end - start);

    free(array);
    return 0;
}
