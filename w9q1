#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <mpi.h>

#define MAX_ITER 1000
#define TOLERANCE 1e-6

int main(int argc, char* argv[]) {
    int rank, size, i, j, iter;
    int n = 4; // Size of the matrix (4x4)
    double A[16] = {4, -1, 0, 0, -1, 4, -1, 0, 0, -1, 4, -1, 0, 0, -1, 4};
    double b[4] = {15, 10, 10, 15};
    double x[4] = {0, 0, 0, 0}; // Initial guess
    double local_x[4], old_x, sum;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    for (iter = 0; iter < MAX_ITER; iter++) {
        int converged = 1;

        for (i = rank; i < n; i += size) {
            sum = b[i];
            for (j = 0; j < n; j++) {
                if (j != i) sum -= A[i * n + j] * x[j];
            }
            old_x = x[i];
            x[i] = sum / A[i * n + i];
            if (fabs(x[i] - old_x) > TOLERANCE) converged = 0;
        }

        MPI_Allgather(MPI_IN_PLACE, 1, MPI_DOUBLE, x, 1, MPI_DOUBLE, MPI_COMM_WORLD);
        int global_converged;
        MPI_Allreduce(&converged, &global_converged, 1, MPI_INT, MPI_MIN, MPI_COMM_WORLD);
        if (global_converged) break;
    }

    if (rank == 0) {
        printf("Solution: ");
        for (i = 0; i < n; i++) printf("%f ", x[i]);
        printf("\n");
    }

    MPI_Finalize();
    return 0;
}
