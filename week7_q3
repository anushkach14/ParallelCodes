#include <stdio.h>
#include <mpi.h>

int main(int argc, char *argv[]) {
    int rank, size;
    int n = 1000; // Size of the array
    int arr[n];
    int local_sum = 0, total_sum = 0;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Initialize the array with values 1, 2, ..., n (only on process 0)
    if (rank == 0) {
        for (int i = 0; i < n; i++) {
            arr[i] = i + 1;
        }
    }

    // Each process gets a portion of the array
    int local_n = n / size; // Size of the portion for each process
    int start = rank * local_n;
    int end = (rank + 1) * local_n;

    // Compute the sum of the local portion
    for (int i = start; i < end; i++) {
        local_sum += arr[i];
    }

    // Use MPI_Reduce to gather the sums and compute the total sum at process 0
    MPI_Reduce(&local_sum, &total_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    // Process 0 prints the total sum
    if (rank == 0) {
        printf("Total sum: %d\n", total_sum);
    }

    MPI_Finalize();
    return 0;
}
