#include <stdio.h>
#include <mpi.h>

int main(int argc, char *argv[]) {
    int rank, size;
    int n = 1000;  // Size of the dataset (array of integers)
    int arr[n];
    int local_sum = 0, global_sum = 0;
    int local_count = 0, global_count = 0;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Process 0 initializes the array with values 1 to n
    if (rank == 0) {
        for (int i = 0; i < n; i++) {
            arr[i] = i + 1;
        }
    }

    // Calculate the portion of the array each process will work on
    int local_n = n / size;  // Each process gets an equal portion of the array
    int *local_arr = (int *)malloc(local_n * sizeof(int));

    // Scatter the data from process 0 to all processes
    MPI_Scatter(arr, local_n, MPI_INT, local_arr, local_n, MPI_INT, 0, MPI_COMM_WORLD);

    // Each process computes its local sum and count
    for (int i = 0; i < local_n; i++) {
        local_sum += local_arr[i];
    }
    local_count = local_n;  // Each process works on `local_n` elements

    // Gather the local sums and counts from all processes to compute the global sum and count
    MPI_Reduce(&local_sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
    MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    // Process 0 computes and prints the global average
    if (rank == 0) {
        double global_avg = (double)global_sum / global_count;
        printf("Global average: %f\n", global_avg);
    }

    // Clean up
    free(local_arr);
    MPI_Finalize();
    return 0;
}
