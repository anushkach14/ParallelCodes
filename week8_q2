#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

int main(int argc, char *argv[]) {
    int rank, size;
    int *data = NULL;
    int *sub_data = NULL;
    int data_size = 1000;  // Total number of elements in the dataset
    int sub_data_size;     // Number of elements each process will handle
    int local_sum = 0, global_sum = 0;
    int local_count = 0, global_count = 0;
    double global_avg;
    int i;

    // Initialize MPI
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Size of sub-array each process will handle
    sub_data_size = data_size / size;

    // Root process initializes the data
    if (rank == 0) {
        data = (int *)malloc(data_size * sizeof(int));
        // Fill the data array with values (e.g., 1, 2, 3, ..., 1000)
        for (i = 0; i < data_size; i++) {
            data[i] = i + 1;
        }
    }

    // Allocate space for each process to hold its part of the data
    sub_data = (int *)malloc(sub_data_size * sizeof(int));

    // Scatter the data to all processes
    MPI_Scatter(data, sub_data_size, MPI_INT, sub_data, sub_data_size, MPI_INT, 0, MPI_COMM_WORLD);

    // Each process computes the local sum and count
    for (i = 0; i < sub_data_size; i++) {
        local_sum += sub_data[i];
        local_count++;
    }

    // Use MPI_Reduce to combine the local sums and counts at the root process
    MPI_Reduce(&local_sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
    MPI_Reduce(&local_count, &global_count, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    // Root process calculates the global average
    if (rank == 0) {
        global_avg = (double)global_sum / global_count;
        printf("Global Average: %f\n", global_avg);

        // Clean up allocated memory
        free(data);
    }

    // Clean up process-specific memory
    free(sub_data);

    // Finalize MPI
    MPI_Finalize();

    return 0;
}
