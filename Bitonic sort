#include <stdio.h>
#include <stdlib.h>
#include <omp.h>
#include <time.h>

#define N 1024 // Size of the array (must be a power of 2)

void bitonic_compare(int *arr, int i, int j, int dir) {
    if (dir == (arr[i] > arr[j])) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}

void bitonic_merge(int *arr, int low, int cnt, int dir) {
    if (cnt > 1) {
        int k = cnt / 2;
        #pragma omp parallel for
        for (int i = low; i < low + k; i++) {
            bitonic_compare(arr, i, i + k, dir);
        }
        bitonic_merge(arr, low, k, dir);
        bitonic_merge(arr, low + k, k, dir);
    }
}

void bitonic_sort(int *arr, int low, int cnt, int dir) {
    if (cnt > 1) {
        int k = cnt / 2;
        bitonic_sort(arr, low, k, 1);  // Sort in ascending order
        bitonic_sort(arr, low + k, k, 0);  // Sort in descending order
        bitonic_merge(arr, low, cnt, dir);  // Merge the results
    }
}

void print_array(int *arr, int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int *arr = (int *)malloc(N * sizeof(int));
    srand(time(0));

    // Initialize array with random integers
    for (int i = 0; i < N; i++) {
        arr[i] = rand() % 1000;  // Random values between 0 and 999
    }

    // Print the unsorted array
    printf("Unsorted array:\n");
    print_array(arr, N);

    // Start the timer
    double start_time = omp_get_wtime();

    // Sort the array using Bitonic Sort
    bitonic_sort(arr, 0, N, 1);

    // Stop the timer
    double end_time = omp_get_wtime();
    
    // Print the sorted array
    printf("Sorted array:\n");
    print_array(arr, N);

    // Print the time taken for sorting
    printf("Time taken for parallel Bitonic Sort: %f seconds\n", end_time - start_time);

    // Cleanup
    free(arr);

    return 0;
}
